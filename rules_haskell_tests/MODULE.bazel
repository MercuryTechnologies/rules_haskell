module(
    name = "rules_haskell_tests",
    version = "0.16",
)

bazel_dep(
    name = "rules_nixpkgs_core",
    version = "0.9.0",
)

bazel_dep(
    name = "rules_haskell_nix",
    version = "0.16",
)

bazel_dep(
    name = "rules_haskell",
    version = "0.16",
)

bazel_dep(
    name = "rules_license",
    version = "0.0.7",
)

bazel_dep(
    name = "rules_nixpkgs_cc",
    version = "0.9.0",
)

bazel_dep(
    name = "rules_nixpkgs_python",
    version = "0.9.0",
)

bazel_dep(
    name = "rules_python",
    version = "0.21.0",
)

bazel_dep(
    name = "rules_nixpkgs_go",
    version = "0.9.0",
)

bazel_dep(
    name = "rules_nixpkgs_posix",
    version = "0.9.0",
)

bazel_dep(
    name = "rules_nixpkgs_nodejs",
    version = "0.9.0",
)

bazel_dep(
    name = "platforms",
    version = "0.0.6",
)

bazel_dep(
    name = "rules_cc",
    version = "0.0.6",
)

bazel_dep(
    name = "rules_sh",
    version = "0.3.0",
)

bazel_dep(
    name = "bazel_skylib",
    version = "1.4.2",
)

bazel_dep(
    name = "rules_java",
    version = "6.1.0",
)

bazel_dep(
    name = "rules_nodejs",
    version = "5.8.2",
)

bazel_dep(
    name = "aspect_rules_js",
    version = "1.23.0",
)

bazel_dep(
    name = "aspect_bazel_lib",
    version = "1.31.2",
)

bazel_dep(
    name = "rules_proto",
    version = "5.3.0-21.7",
)

bazel_dep(
    name = "protobuf",
    version = "21.7",
    repo_name = "com_google_protobuf",
)

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps")

use_repo(
    non_module_deps,
    "os_info",
    "zlib.hs",
    "contrib_rules_bazel_integration_test",
    "c2hs_repo",
    "library_repo",
    "haskell_package_repository_dummy",
    "com_github_bazelbuild_buildtools",
    "cgrindel_bazel_starlib",
)

non_modules_deps_1 = use_extension("//:non_module_deps_1.bzl", "non_module_deps_1")

use_repo(
    non_modules_deps_1,
    "glibc_locales",
    "nixpkgs_default",
    "rules_haskell_ghc_darwin_amd64-toolchain",
    "rules_haskell_ghc_darwin_arm64-toolchain",
    "rules_haskell_ghc_linux_amd64-toolchain",
    "rules_haskell_ghc_windows_amd64-toolchain",
    "rules_haskell_ghc_linux_arm64-toolchain",
    "rules_haskell_ghc_windows_amd64_cc_toolchain",
    "nixpkgs_python_toolchain",
    "rules_haskell_python_local",
    "nixpkgs_config_cc",
    "nixpkgs_config_cc_info",
    "nixpkgs_config_cc_toolchains",
    "nixpkgs_go_sdk_toolchains",
    "nixpkgs_go_sdk",
    "nixpkgs_lz4",
    "linux_amd64_asterius-toolchain",
    "asterius_bundle_linux_amd64",
    "toolchains_libraries",
    "zlib.dev",
    "bazel_5",
    "build_bazel_bazel_5_0_0",
    "build_bazel_bazel_5_2_0",
    "build_bazel_bazel_6_2_0",
    "bazel_6",
)

register_toolchains(
    "@nixpkgs_config_cc_toolchains//:all",
    "@nixpkgs_go_sdk_toolchains//:all",
    "@linux_amd64_asterius-toolchain//:toolchain",
    "@linux_amd64_asterius-toolchain//:asterius_toolchain",
    "@linux_amd64_asterius-toolchain//:wasm_cc_toolchain",
    "@rules_haskell_python_local//:toolchain",
    "@nixpkgs_python_toolchain//:toolchain",
)

non_module_deps_2 = use_extension("//:non_module_deps_2.bzl", "non_module_deps_2")

use_repo(
    non_module_deps_2,
    "data-default-ic",
    "data-default-ol",
    "ghcide",
    "stackage-zlib",
    "stackage-zlib-unpinned",
    "ghcide-exe",
    "Cabal",
    "stackage-pinning-test",
    "stackage-pinning-test-unpinned",
    "alex",
    "stackage",
    "stackage-unpinned",
    "stackage-exe",
    "rules_haskell_stack_update",
    "rules_haskell_stack",
    "stackage_asterius",
    "stackage_asterius-unpinned",
)

non_modules_deps_bzlmod = use_extension(
    "//:non_module_deps_bzlmod.bzl",
    "non_module_deps_bzlmod",
)

use_repo(
    non_modules_deps_bzlmod,
    "rules_haskell_ghc_nixpkgs_toolchain",
    "rules_haskell_ghc_nixpkgs",
)

register_toolchains(
    "@rules_haskell_ghc_nixpkgs_toolchain//:toolchain",
    "@rules_haskell_ghc_darwin_amd64-toolchain//:toolchain",
    "@rules_haskell_ghc_darwin_arm64-toolchain//:toolchain",
    "@rules_haskell_ghc_linux_amd64-toolchain//:toolchain",
    "@rules_haskell_ghc_linux_arm64-toolchain//:toolchain",
    "@rules_haskell_ghc_windows_amd64-toolchain//:toolchain",
    "@rules_haskell_ghc_windows_amd64-toolchain//:toolchain",
    "@rules_haskell_ghc_windows_amd64_cc_toolchain//:windows_cc_toolchain",
)

[
    (
        use_repo(
            non_modules_deps_bzlmod,
            "nixpkgs_nodejs_{}_{}_toolchain".format(os, arch),
        ),
        register_toolchains("@nixpkgs_nodejs_{}_{}_toolchain//:all".format(os, arch)),
    )
    for os in [
        "linux",
        "darwin",
    ]
    for arch in [
        "amd64",
        "arm64",
    ]
]

register_toolchains(
    "//tests:c2hs-toolchain",
    "//tests:doctest-toolchain",
    "//tests:protobuf-toolchain",
    "//tests:protobuf-toolchain-osx_arm64",
)

# To test accessing runfiles with a library in another module
bazel_dep(
    name = "other_module",
    version = "0.0.1",
)

local_path_override(
    module_name = "other_module",
    path = "tests/bzlmod_runfiles/other_module",
)

# Go setup for buildifieR
bazel_dep(
    name = "rules_go",
    version = "0.39.1",
    repo_name = "io_bazel_rules_go",
)

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")

go_sdk.download(
    version = "1.19.7",
)

bazel_dep(
    name = "gazelle",
    version = "0.30.0",
)

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

go_deps.module(
    path = "github.com/gogo/protobuf",
    sum = "h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=",
    version = "v1.3.2",
)

use_repo(
    go_deps,
    "com_github_gogo_protobuf",
    "com_github_golang_mock",
    "com_github_golang_protobuf",
    "org_golang_google_genproto",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_net",
    "org_golang_x_tools",
)

# Java dependencies for the //tests/java_classpath test
bazel_dep(
    name = "rules_jvm_external",
    version = "5.1",
)

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

maven.install(
    name = "rules_haskell_tests_maven",
    artifacts = ["org.apache.spark:spark-core_2.10:1.6.0"],
)

use_repo(maven, "rules_haskell_tests_maven")

# Bring some dependencies declared by rules_haskell module extensions into scope
asterius = use_extension("@rules_haskell//haskell/asterius:extension.bzl", "rules_haskell_asterius")

use_repo(
    asterius,
    "rules_haskell_asterius_webpack",
    "rules_haskell_asterius_build_setting",
)

rules_haskell_dependencies = use_extension("@rules_haskell//extensions:rules_haskell_dependencies.bzl", "rules_haskell_dependencies")

use_repo(
    rules_haskell_dependencies,
    "zlib",
)
